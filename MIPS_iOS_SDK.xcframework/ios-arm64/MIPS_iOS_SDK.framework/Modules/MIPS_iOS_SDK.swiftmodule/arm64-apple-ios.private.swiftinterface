// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios17.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIPS_iOS_SDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import MIPS_iOS_SDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Currency : Swift.String {
  case Mauritian_Rupee
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class MerchantDetails {
  final public let sIdMerchant: Swift.String
  final public let salt: Swift.String
  final public let sCipherKey: Swift.String
  final public let id_entity: Swift.String
  final public let id_operator: Swift.String
  final public let operator_password: Swift.String
  public init(sIdMerchant: Swift.String, salt: Swift.String, sCipherKey: Swift.String, id_entity: Swift.String, id_operator: Swift.String, operator_password: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MipsPaymentJSON : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class LogManager {
  public static let shared: MIPS_iOS_SDK.LogManager
  final public func info(_ msg: Swift.String)
  final public func error(_ msg: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkAdaptor {
  #if compiler(>=5.3) && $AsyncAwait
  public static func checkPaymentStatus(mipsNetworkURl: MIPS_iOS_SDK.MipsNetworkUrls, merchant: MIPS_iOS_SDK.MerchantDetails, credentials: MIPS_iOS_SDK.MerchantCredentials, orderID: Swift.String) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func getPaymentUrl(networkURL: MIPS_iOS_SDK.MipsNetworkUrls, merchant: MIPS_iOS_SDK.MerchantDetails, credentials: MIPS_iOS_SDK.MerchantCredentials, amount: MIPS_iOS_SDK.Amount, orderID: Swift.String) async -> Foundation.URL?
  #endif
  @objc deinit
}
public class MerchantCredentials {
  final public let username: Swift.String
  final public let password: Swift.String
  public init(username: Swift.String, password: Swift.String)
  @objc deinit
}
public enum PaymentMode {
  case instant
  case juice
  case bankTransfer
  public static func == (a: MIPS_iOS_SDK.PaymentMode, b: MIPS_iOS_SDK.PaymentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MipsPaymentPageDelegate : AnyObject {
  func successPayment(_ sender: MIPS_iOS_SDK.MIPSViewController, orderID: Swift.String, mode: MIPS_iOS_SDK.PaymentMode)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class MIPSViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var delegate: (any MIPS_iOS_SDK.MipsPaymentPageDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(merchantDetails: MIPS_iOS_SDK.MerchantDetails, credentials: MIPS_iOS_SDK.MerchantCredentials, amount: MIPS_iOS_SDK.Amount, orderID: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func createPayment()
  @objc deinit
}
extension MIPS_iOS_SDK.MIPSViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class JSONCoder {
  public static func decodeJson<T>(model: T.Type, data: Foundation.Data) -> (T?, (any Swift.Error)?) where T : Swift.Decodable
  public static func encodeJso<T>(json: T) -> (Foundation.Data?, (any Swift.Error)?) where T : Swift.Encodable
  public static func encodeJson(json: [Swift.String : Any]) -> (Foundation.Data?, (any Swift.Error)?)
  public static func decodeJson(data: Foundation.Data) -> ([Swift.String : Any], (any Swift.Error)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HttpHandler {
  #if compiler(>=5.3) && $AsyncAwait
  public static func request(_ req: Foundation.URLRequest) async -> (Foundation.Data?, (any Swift.Error)?)
  #endif
  @objc deinit
}
public class Amount {
  final public let currency: MIPS_iOS_SDK.Currency
  final public let price: Swift.Int
  public init(currency: MIPS_iOS_SDK.Currency, price: Swift.Int)
  @objc deinit
}
public struct MipsNetworkUrls {
  public let baseURl: Swift.String
  public let paymentConfirmationUrl: Swift.String
  public let paymentUrlGenerator: Swift.String
  public init(baseURl: Swift.String, paymentConfirmationUrl: Swift.String, paymentUrlGenerator: Swift.String)
  public init()
  public static let defaultUrls: MIPS_iOS_SDK.MipsNetworkUrls
}
extension MIPS_iOS_SDK.Currency : Swift.Equatable {}
extension MIPS_iOS_SDK.Currency : Swift.Hashable {}
extension MIPS_iOS_SDK.Currency : Swift.RawRepresentable {}
extension MIPS_iOS_SDK.PaymentMode : Swift.Equatable {}
extension MIPS_iOS_SDK.PaymentMode : Swift.Hashable {}
